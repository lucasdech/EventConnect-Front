import { InputSignal, InputSignalWithTransform } from '@angular/core';
import { ButtonType, Colors, Shapes } from '../coreui.types';
import * as i0 from "@angular/core";
export declare class ButtonDirective {
    /**
     * Toggle the active state for the component. [docs]
     * @type InputSignalWithTransform<boolean, unknown>
     */
    readonly active: InputSignalWithTransform<boolean, unknown>;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors. [docs]
     * @type InputSignal<Colors>
     */
    readonly color: InputSignal<Colors>;
    /**
     * Toggle the disabled state for the component.
     * @type InputSignalWithTransform<boolean, unknown>
     */
    readonly disabled: InputSignalWithTransform<boolean, unknown>;
    /**
     * Select the shape of the component.
     * @type InputSignal<Shapes>
     */
    readonly shape: InputSignal<Shapes | undefined>;
    /**
     * Size the component small or large.
     * @type InputSignal<'sm' | 'lg' | ''>
     */
    readonly size: InputSignal<'' | 'sm' | 'lg'>;
    /**
     * Specifies the type of button. Always specify the type attribute for the `<button>` element.
     * Different browsers may use different default types for the `<button>` element.
     * @type InputSignal<ButtonType>
     * @default 'button'
     */
    readonly type: InputSignal<ButtonType>;
    /**
     * Set the button variant to an outlined button or a ghost button.
     * @type InputSignal<'ghost' | 'outline' | undefined>
     */
    readonly variant: InputSignal<'ghost' | 'outline' | undefined>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    readonly _disabled: import("@angular/core").Signal<boolean>;
    readonly ariaDisabled: import("@angular/core").Signal<true | null>;
    readonly attrDisabled: import("@angular/core").Signal<"" | null>;
    readonly tabIndex: import("@angular/core").Signal<"-1" | null>;
    readonly isActive: import("@angular/core").Signal<true | null>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ButtonDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ButtonDirective, "[cButton]", ["cButton"], { "active": { "alias": "active"; "required": false; "isSignal": true; }; "color": { "alias": "color"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "shape": { "alias": "shape"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "type": { "alias": "type"; "required": false; "isSignal": true; }; "variant": { "alias": "variant"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
