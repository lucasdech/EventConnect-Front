import { ElementRef, InputSignal, InputSignalWithTransform } from '@angular/core';
import { Colors } from '../coreui.types';
import * as i0 from "@angular/core";
export declare class ListGroupItemDirective {
    readonly hostElement: ElementRef<any>;
    /**
     * Toggle the active state for the component.
     * @type InputSignal<boolean | undefined>
     */
    readonly active: InputSignal<boolean | undefined>;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     * @type InputSignal<boolean | undefined>
     */
    readonly color: InputSignal<Colors | undefined>;
    /**
     * Set disabled attr for the host element. [docs]
     * @type boolean
     */
    readonly disabled: InputSignalWithTransform<boolean, unknown>;
    readonly hostClasses: import("@angular/core").Signal<{
        [x: string]: boolean;
        'list-group-item': boolean;
        'list-group-item-action': boolean;
        active: boolean;
        disabled: boolean;
    }>;
    readonly _disabled: import("@angular/core").Signal<boolean>;
    readonly ariaDisabled: import("@angular/core").Signal<true | null>;
    readonly attrDisabled: import("@angular/core").Signal<"" | null>;
    readonly tabIndex: import("@angular/core").Signal<"-1" | null>;
    readonly ariaCurrent: import("@angular/core").Signal<true | null>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ListGroupItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ListGroupItemDirective, "[cListGroupItem], c-list-group-item", ["cListGroupItem"], { "active": { "alias": "active"; "required": false; "isSignal": true; }; "color": { "alias": "color"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
