import { InputSignal } from '@angular/core';
import { Colors, Shapes, Sizes, TextColors } from '../coreui.types';
import * as i0 from "@angular/core";
import * as i1 from "../utilities/text-color.directive";
export declare class AvatarComponent {
    /**
     * Sets the background color context of the component to one of CoreUI’s themed colors.
     * @type Colors
     */
    readonly color: InputSignal<Colors | undefined>;
    /**
     * Select the shape of the component.
     * @type Shapes
     */
    readonly shape: InputSignal<Shapes | undefined>;
    /**
     * Size the component small, large, or extra large.
     * @default 'md'
     */
    readonly size: InputSignal<Omit<Sizes, 'xxl'>>;
    /**
     * The alt attribute for the img element alternate text.
     * @type string
     */
    readonly alt: InputSignal<string>;
    /**
     * The src attribute for the img element.
     * @type string
     */
    readonly src: InputSignal<string | undefined>;
    /**
     * Sets the color context of the status indicator to one of CoreUI’s themed colors.
     * @type Colors
     */
    readonly status: InputSignal<Colors | undefined>;
    /**
     * Sets the text color of the component to one of CoreUI’s themed colors.
     * via TextColorDirective
     * @type TextColors
     */
    readonly textColor: InputSignal<TextColors | undefined>;
    readonly statusClass: import("@angular/core").Signal<Record<string, boolean>>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AvatarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AvatarComponent, "c-avatar", never, { "color": { "alias": "color"; "required": false; "isSignal": true; }; "shape": { "alias": "shape"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "alt": { "alias": "alt"; "required": false; "isSignal": true; }; "src": { "alias": "src"; "required": false; "isSignal": true; }; "status": { "alias": "status"; "required": false; "isSignal": true; }; "textColor": { "alias": "textColor"; "required": false; "isSignal": true; }; }, {}, never, ["*"], true, [{ directive: typeof i1.TextColorDirective; inputs: { "cTextColor": "textColor"; }; outputs: {}; }]>;
}
