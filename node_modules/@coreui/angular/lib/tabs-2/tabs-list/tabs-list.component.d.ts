import { InputSignal } from '@angular/core';
import { TabDirective } from '../tab/tab.directive';
import { TabsService } from '../tabs.service';
import * as i0 from "@angular/core";
export declare class TabsListComponent {
    #private;
    readonly tabsService: TabsService;
    /**
     * Specify a layout type for component.
     * @type 'fill' | 'justified' | undefined
     * @default undefined
     */
    readonly layout: InputSignal<'fill' | 'justified' | undefined>;
    /**
     * Set the variant to tabs, pills or underline.
     * @type 'pills' | 'tabs' | 'underline' | 'underline-border' | undefined
     * @default undefined
     */
    readonly variant: InputSignal<'pills' | 'tabs' | 'underline' | 'underline-border' | undefined>;
    /**
     * Set the role to tab list.
     * @default 'tablist'
     */
    readonly role: InputSignal<string>;
    readonly hostClasses: import("@angular/core").Signal<{
        [x: string]: boolean | "fill" | "justified" | "tabs" | "pills" | "underline" | "underline-border" | undefined;
        nav: boolean;
    }>;
    readonly tabs: import("@angular/core").Signal<readonly TabDirective[]>;
    readonly tabsEffect: import("@angular/core").EffectRef;
    tabsServiceEffect: import("@angular/core").EffectRef;
    onKeydown($event: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TabsListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TabsListComponent, "c-tabs-list", ["cTabsList"], { "layout": { "alias": "layout"; "required": false; "isSignal": true; }; "variant": { "alias": "variant"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; }, {}, ["tabs"], ["*"], true, never>;
}
