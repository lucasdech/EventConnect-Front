import { Colors } from '../coreui.types';
import { IProgressBar } from './progress.type';
import * as i0 from "@angular/core";
export declare class ProgressBarDirective implements IProgressBar {
    #private;
    readonly percent: import("@angular/core").Signal<number>;
    /**
     * Use to animate the stripes right to left via CSS3 animations.
     * @type boolean
     */
    animated?: boolean;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    color?: Colors;
    precision: number;
    /**
     * The percent value the ProgressBar.
     * @type number
     * @default 0
     */
    set value(value: number | undefined);
    get value(): number | undefined;
    set width(value: number | undefined);
    /**
     * Set the progress bar variant to optional striped.
     * @values 'striped'
     * @default undefined
     */
    variant?: 'striped';
    /**
     * The max value of the ProgressBar.
     * @type number
     * @default 100
     */
    set max(max: number);
    /**
     * Stacked ProgressBars.
     * @type boolean
     * @default false
     */
    stacked?: boolean;
    /**
     * Set default html role attribute.
     * @type string
     */
    role: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProgressBarDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProgressBarDirective, "[cProgressBar]", never, { "animated": { "alias": "animated"; "required": false; }; "color": { "alias": "color"; "required": false; }; "precision": { "alias": "precision"; "required": false; }; "value": { "alias": "value"; "required": false; }; "width": { "alias": "width"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "max": { "alias": "max"; "required": false; }; "stacked": { "alias": "stacked"; "required": false; }; "role": { "alias": "role"; "required": false; }; }, {}, never, never, true, never>;
    static ngAcceptInputType_animated: unknown;
    static ngAcceptInputType_precision: unknown;
    static ngAcceptInputType_value: unknown;
    static ngAcceptInputType_width: unknown;
    static ngAcceptInputType_max: unknown;
    static ngAcceptInputType_stacked: unknown;
}
