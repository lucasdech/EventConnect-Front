import { ContentChildren, DestroyRef, Directive, ElementRef, forwardRef, HostBinding, HostListener, inject, Input } from '@angular/core';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tap } from 'rxjs/operators';
import { ThemeDirective } from '../../shared/theme.directive';
import { DropdownService } from '../dropdown.service';
import { DropdownItemDirective } from '../dropdown-item/dropdown-item.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/theme.directive";
export class DropdownMenuDirective {
    constructor() {
        this.#destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.#dropdownService = inject(DropdownService);
        /**
         * Toggle the visibility of dropdown menu component.
         * @type boolean
         */
        this.visible = false;
    }
    #destroyRef;
    #dropdownService;
    #focusKeyManager;
    get hostClasses() {
        return {
            'dropdown-menu': true,
            [`dropdown-menu-${this.alignment}`]: !!this.alignment,
            show: this.visible
        };
    }
    get hostStyles() {
        // workaround for popper position calculate (see also: dropdown.component)
        return {
            visibility: this.visible ? null : '',
            display: this.visible ? null : ''
        };
    }
    onKeyDown($event) {
        if (!this.visible) {
            return;
        }
        if (['Space', 'ArrowDown'].includes($event.code)) {
            $event.preventDefault();
        }
        this.#focusKeyManager.onKeydown($event);
    }
    onKeyUp($event) {
        if (!this.visible) {
            return;
        }
        if (['Tab'].includes($event.key)) {
            if (this.#focusKeyManager.activeItem) {
                $event.shiftKey ? this.#focusKeyManager.setPreviousItemActive() : this.#focusKeyManager.setNextItemActive();
            }
            else {
                this.#focusKeyManager.setFirstItemActive();
            }
        }
    }
    ngAfterContentInit() {
        this.focusKeyManagerInit();
        this.dropdownItemsContent.changes
            .pipe(tap((change) => {
            this.focusKeyManagerInit();
        }), takeUntilDestroyed(this.#destroyRef))
            .subscribe();
    }
    ngOnInit() {
        this.#dropdownService.dropdownState$
            .pipe(tap((state) => {
            if ('visible' in state) {
                this.visible = state.visible === 'toggle' ? !this.visible : state.visible;
                if (!this.visible) {
                    this.#focusKeyManager?.setActiveItem(-1);
                }
            }
        }), takeUntilDestroyed(this.#destroyRef))
            .subscribe();
    }
    focusKeyManagerInit() {
        this.#focusKeyManager = new FocusKeyManager(this.dropdownItemsContent)
            .withHomeAndEnd()
            .withPageUpDown()
            .withWrap()
            .skipPredicate((dropdownItem) => dropdownItem.disabled === true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: DropdownMenuDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.2", type: DropdownMenuDirective, isStandalone: true, selector: "[cDropdownMenu]", inputs: { alignment: "alignment", visible: "visible" }, host: { listeners: { "keydown": "onKeyDown($event)", "keyup": "onKeyUp($event)" }, properties: { "class": "this.hostClasses", "style": "this.hostStyles" }, classAttribute: "dropdown-menu" }, queries: [{ propertyName: "dropdownItemsContent", predicate: i0.forwardRef(() => DropdownItemDirective), descendants: true }], exportAs: ["cDropdownMenu"], hostDirectives: [{ directive: i1.ThemeDirective, inputs: ["dark", "dark"] }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: DropdownMenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[cDropdownMenu]',
                    exportAs: 'cDropdownMenu',
                    standalone: true,
                    hostDirectives: [{ directive: ThemeDirective, inputs: ['dark'] }],
                    host: { class: 'dropdown-menu' }
                }]
        }], propDecorators: { alignment: [{
                type: Input
            }], visible: [{
                type: Input
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], hostStyles: [{
                type: HostBinding,
                args: ['style']
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], dropdownItemsContent: [{
                type: ContentChildren,
                args: [forwardRef(() => DropdownItemDirective), { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,