import { ChangeDetectionStrategy, Component, HostBinding, inject } from '@angular/core';
import { ProgressBarDirective } from './progress-bar.directive';
import * as i0 from "@angular/core";
import * as i1 from "./progress-bar.directive";
export class ProgressBarComponent {
    #progressBarDirective = inject(ProgressBarDirective, { optional: true });
    get hostClasses() {
        const animated = this.#progressBarDirective?.animated;
        const color = this.#progressBarDirective?.color;
        const variant = this.#progressBarDirective?.variant;
        return {
            'progress-bar': true,
            'progress-bar-animated': !!animated,
            [`progress-bar-${variant}`]: !!variant,
            [`bg-${color}`]: !!color
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.2", type: ProgressBarComponent, isStandalone: true, selector: "c-progress-bar", host: { properties: { "class": "this.hostClasses" }, classAttribute: "progress-bar" }, hostDirectives: [{ directive: i1.ProgressBarDirective, inputs: ["animated", "animated", "color", "color", "max", "max", "role", "role", "stacked", "stacked", "value", "value", "variant", "variant", "width", "width"] }], ngImport: i0, template: '<ng-content />', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ProgressBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c-progress-bar',
                    template: '<ng-content />',
                    standalone: true,
                    hostDirectives: [
                        {
                            directive: ProgressBarDirective,
                            inputs: ['animated', 'color', 'max', 'role', 'stacked', 'value', 'variant', 'width']
                        }
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'progress-bar' }
                }]
        }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvcHJvZ3Jlc3MvcHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQWVoRSxNQUFNLE9BQU8sb0JBQW9CO0lBQ3RCLHFCQUFxQixHQUFnQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUvRyxJQUNJLFdBQVc7UUFDYixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsUUFBUSxDQUFDO1FBQ3RELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQztRQUNwRCxPQUFPO1lBQ0wsY0FBYyxFQUFFLElBQUk7WUFDcEIsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLFFBQVE7WUFDbkMsQ0FBQyxnQkFBZ0IsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTztZQUN0QyxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSztTQUN6QixDQUFDO0lBQ0osQ0FBQzs4R0FkVSxvQkFBb0I7a0dBQXBCLG9CQUFvQiw2WEFYckIsZ0JBQWdCOzsyRkFXZixvQkFBb0I7a0JBYmhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLGNBQWMsRUFBRTt3QkFDZDs0QkFDRSxTQUFTLEVBQUUsb0JBQW9COzRCQUMvQixNQUFNLEVBQUUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDO3lCQUNyRjtxQkFDRjtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRTtpQkFDaEM7OEJBS0ssV0FBVztzQkFEZCxXQUFXO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9ncmVzc0JhckRpcmVjdGl2ZSB9IGZyb20gJy4vcHJvZ3Jlc3MtYmFyLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2MtcHJvZ3Jlc3MtYmFyJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudCAvPicsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGhvc3REaXJlY3RpdmVzOiBbXG4gICAge1xuICAgICAgZGlyZWN0aXZlOiBQcm9ncmVzc0JhckRpcmVjdGl2ZSxcbiAgICAgIGlucHV0czogWydhbmltYXRlZCcsICdjb2xvcicsICdtYXgnLCAncm9sZScsICdzdGFja2VkJywgJ3ZhbHVlJywgJ3ZhcmlhbnQnLCAnd2lkdGgnXVxuICAgIH1cbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHsgY2xhc3M6ICdwcm9ncmVzcy1iYXInIH1cbn0pXG5leHBvcnQgY2xhc3MgUHJvZ3Jlc3NCYXJDb21wb25lbnQge1xuICByZWFkb25seSAjcHJvZ3Jlc3NCYXJEaXJlY3RpdmU6IFByb2dyZXNzQmFyRGlyZWN0aXZlIHwgbnVsbCA9IGluamVjdChQcm9ncmVzc0JhckRpcmVjdGl2ZSwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGhvc3RDbGFzc2VzKCk6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+IHtcbiAgICBjb25zdCBhbmltYXRlZCA9IHRoaXMuI3Byb2dyZXNzQmFyRGlyZWN0aXZlPy5hbmltYXRlZDtcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuI3Byb2dyZXNzQmFyRGlyZWN0aXZlPy5jb2xvcjtcbiAgICBjb25zdCB2YXJpYW50ID0gdGhpcy4jcHJvZ3Jlc3NCYXJEaXJlY3RpdmU/LnZhcmlhbnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICdwcm9ncmVzcy1iYXInOiB0cnVlLFxuICAgICAgJ3Byb2dyZXNzLWJhci1hbmltYXRlZCc6ICEhYW5pbWF0ZWQsXG4gICAgICBbYHByb2dyZXNzLWJhci0ke3ZhcmlhbnR9YF06ICEhdmFyaWFudCxcbiAgICAgIFtgYmctJHtjb2xvcn1gXTogISFjb2xvclxuICAgIH07XG4gIH1cbn1cbiJdfQ==