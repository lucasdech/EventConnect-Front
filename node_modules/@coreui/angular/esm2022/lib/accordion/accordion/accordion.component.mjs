import { booleanAttribute, Component, HostBinding, inject, Input } from '@angular/core';
import { AccordionService } from '../accordion.service';
import * as i0 from "@angular/core";
export class AccordionComponent {
    constructor() {
        this.#accordionService = inject(AccordionService);
        /**
         * Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.
         * @type boolean
         */
        this.flush = false;
    }
    #accordionService;
    /**
     * Make accordion items stay open when another item is opened
     * @type boolean
     */
    set alwaysOpen(value) {
        this.#accordionService.alwaysOpen = value;
    }
    get alwaysOpen() {
        return this.#accordionService.alwaysOpen;
    }
    get hostClasses() {
        return {
            accordion: true,
            'accordion-flush': this.flush
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: AccordionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.2", type: AccordionComponent, isStandalone: true, selector: "c-accordion", inputs: { flush: ["flush", "flush", booleanAttribute], alwaysOpen: ["alwaysOpen", "alwaysOpen", booleanAttribute] }, host: { properties: { "class": "this.hostClasses" }, classAttribute: "accordion" }, providers: [AccordionService], exportAs: ["cAccordionItem"], ngImport: i0, template: '<ng-content />', isInline: true, styles: [":host{display:block}\n"] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: AccordionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c-accordion', template: '<ng-content />', exportAs: 'cAccordionItem', providers: [AccordionService], standalone: true, host: { class: 'accordion' }, styles: [":host{display:block}\n"] }]
        }], propDecorators: { flush: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], alwaysOpen: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYWNjb3JkaW9uL2FjY29yZGlvbi9hY2NvcmRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7O0FBV3hELE1BQU0sT0FBTyxrQkFBa0I7SUFUL0I7UUFVRSxzQkFBaUIsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUU3Qzs7O1dBR0c7UUFDcUMsVUFBSyxHQUFZLEtBQUssQ0FBQztLQXNCaEU7SUE1QkMsaUJBQWlCLENBQTRCO0lBUTdDOzs7T0FHRztJQUNILElBQ0ksVUFBVSxDQUFDLEtBQWM7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFDSSxXQUFXO1FBQ2IsT0FBTztZQUNMLFNBQVMsRUFBRSxJQUFJO1lBQ2YsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDOUIsQ0FBQztJQUNKLENBQUM7OEdBNUJVLGtCQUFrQjtrR0FBbEIsa0JBQWtCLG1GQU9ULGdCQUFnQiw0Q0FNaEIsZ0JBQWdCLG9HQWpCekIsQ0FBQyxnQkFBZ0IsQ0FBQyx3REFIbkIsZ0JBQWdCOzsyRkFPZixrQkFBa0I7a0JBVDlCLFNBQVM7K0JBQ0UsYUFBYSxZQUNiLGdCQUFnQixZQUVoQixnQkFBZ0IsYUFDZixDQUFDLGdCQUFnQixDQUFDLGNBQ2pCLElBQUksUUFDVixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUU7OEJBU1ksS0FBSztzQkFBNUMsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRTtnQkFPbEMsVUFBVTtzQkFEYixLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQVVsQyxXQUFXO3NCQURkLFdBQVc7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJvb2xlYW5BdHRyaWJ1dGUsIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIGluamVjdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4uL2FjY29yZGlvbi5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYy1hY2NvcmRpb24nLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50IC8+JyxcbiAgc3R5bGVVcmxzOiBbJy4vYWNjb3JkaW9uLmNvbXBvbmVudC5zY3NzJ10sXG4gIGV4cG9ydEFzOiAnY0FjY29yZGlvbkl0ZW0nLFxuICBwcm92aWRlcnM6IFtBY2NvcmRpb25TZXJ2aWNlXSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaG9zdDogeyBjbGFzczogJ2FjY29yZGlvbicgfVxufSlcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQge1xuICAjYWNjb3JkaW9uU2VydmljZSA9IGluamVjdChBY2NvcmRpb25TZXJ2aWNlKTtcblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZGVmYXVsdCBiYWNrZ3JvdW5kLWNvbG9yLCBzb21lIGJvcmRlcnMsIGFuZCBzb21lIHJvdW5kZWQgY29ybmVycyB0byByZW5kZXIgYWNjb3JkaW9ucyBlZGdlLXRvLWVkZ2Ugd2l0aCB0aGVpciBwYXJlbnQgY29udGFpbmVyLlxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqL1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgZmx1c2g6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogTWFrZSBhY2NvcmRpb24gaXRlbXMgc3RheSBvcGVuIHdoZW4gYW5vdGhlciBpdGVtIGlzIG9wZW5lZFxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqL1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcbiAgc2V0IGFsd2F5c09wZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLiNhY2NvcmRpb25TZXJ2aWNlLmFsd2F5c09wZW4gPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBhbHdheXNPcGVuKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLiNhY2NvcmRpb25TZXJ2aWNlLmFsd2F5c09wZW47XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgZ2V0IGhvc3RDbGFzc2VzKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY29yZGlvbjogdHJ1ZSxcbiAgICAgICdhY2NvcmRpb24tZmx1c2gnOiB0aGlzLmZsdXNoXG4gICAgfTtcbiAgfVxufVxuIl19