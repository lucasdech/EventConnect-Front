import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, computed, HostBinding, HostListener, inject, input, numberAttribute, output, signal } from '@angular/core';
import { TabsService } from '../tabs.service';
import * as i0 from "@angular/core";
export class TabPanelComponent {
    constructor() {
        this.tabsService = inject(TabsService);
        /**
         * aria-labelledby attribute
         * @type string
         * @default undefined
         */
        this.ariaLabelledBy = input(undefined, {
            alias: 'aria-labelledby'
        });
        /**
         * Element id attribute
         * @type string
         * @default undefined
         */
        this.id = input();
        /**
         * Item key.
         * @type string | number
         * @required
         */
        this.itemKey = input.required();
        /**
         * tabindex attribute.
         * @type number
         * @default 0
         */
        this.tabindex = input(0, { transform: numberAttribute });
        /**
         * Enable fade in transition.
         * @type boolean
         * @default true
         */
        this.transition = input(true);
        /**
         * visible change output
         * @type OutputEmitterRef<VisibleChangeEvent>
         */
        this.visibleChange = output();
        this.show = signal(false);
        this.visible = computed(() => {
            const visible = this.tabsService.activeItemKey() === this.itemKey() && !this.tabsService.activeItem()?.disabled;
            this.visibleChange.emit({ itemKey: this.itemKey(), visible });
            return visible;
        });
        this.propId = computed(() => this.id() ?? `${this.tabsService.id()}-panel-${this.itemKey()}`);
        this.attrAriaLabelledBy = computed(() => this.ariaLabelledBy() ?? `${this.tabsService.id()}-tab-${this.itemKey()}`);
        this.hostClasses = computed(() => ({
            'tab-pane': true,
            active: this.show(),
            fade: this.transition(),
            show: this.show(),
            invisible: this.tabsService.activeItem()?.disabled
        }));
    }
    get animationDisabled() {
        return !this.transition();
    }
    get animateType() {
        return this.visible() ? 'show' : 'hide';
    }
    onAnimationDone($event) {
        this.show.set(this.visible());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TabPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.2", type: TabPanelComponent, isStandalone: true, selector: "c-tab-panel", inputs: { ariaLabelledBy: { classPropertyName: "ariaLabelledBy", publicName: "aria-labelledby", isSignal: true, isRequired: false, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, itemKey: { classPropertyName: "itemKey", publicName: "itemKey", isSignal: true, isRequired: true, transformFunction: null }, tabindex: { classPropertyName: "tabindex", publicName: "tabindex", isSignal: true, isRequired: false, transformFunction: null }, transition: { classPropertyName: "transition", publicName: "transition", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { visibleChange: "visibleChange" }, host: { attributes: { "role": "tabpanel" }, listeners: { "@fadeInOut.done": "onAnimationDone($event)" }, properties: { "class": "hostClasses()", "tabindex": "visible() ? tabindex(): -1", "attr.aria-labelledby": "attrAriaLabelledBy()", "id": "propId()", "@.disabled": "this.animationDisabled", "@fadeInOut": "this.animateType" } }, exportAs: ["cTabPanel"], ngImport: i0, template: '<ng-content />', isInline: true, animations: [
            trigger('fadeInOut', [
                state('show', style({ opacity: 1 })),
                state('hide', style({ opacity: 0 })),
                state('void', style({ opacity: 0 })),
                transition('* => *', [animate('150ms linear')])
            ])
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TabPanelComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'cTabPanel',
                    selector: 'c-tab-panel',
                    standalone: true,
                    template: '<ng-content />',
                    host: {
                        '[class]': 'hostClasses()',
                        '[tabindex]': 'visible() ? tabindex(): -1',
                        '[attr.aria-labelledby]': 'attrAriaLabelledBy()',
                        '[id]': 'propId()',
                        role: 'tabpanel'
                    },
                    animations: [
                        trigger('fadeInOut', [
                            state('show', style({ opacity: 1 })),
                            state('hide', style({ opacity: 0 })),
                            state('void', style({ opacity: 0 })),
                            transition('* => *', [animate('150ms linear')])
                        ])
                    ]
                }]
        }], propDecorators: { animationDisabled: [{
                type: HostBinding,
                args: ['@.disabled']
            }], animateType: [{
                type: HostBinding,
                args: ['@fadeInOut']
            }], onAnimationDone: [{
                type: HostListener,
                args: ['@fadeInOut.done', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,