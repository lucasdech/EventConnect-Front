import { FocusKeyManager } from '@angular/cdk/a11y';
import { Component, computed, contentChildren, DestroyRef, effect, HostListener, inject, input, untracked } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tap } from 'rxjs/operators';
import { TabDirective } from '../tab/tab.directive';
import { TabsService } from '../tabs.service';
import * as i0 from "@angular/core";
export class TabsListComponent {
    constructor() {
        this.#destroyRef = inject(DestroyRef);
        this.tabsService = inject(TabsService);
        /**
         * Specify a layout type for component.
         * @type 'fill' | 'justified' | undefined
         * @default undefined
         */
        this.layout = input();
        /**
         * Set the variant to tabs, pills or underline.
         * @type 'pills' | 'tabs' | 'underline' | 'underline-border' | undefined
         * @default undefined
         */
        this.variant = input();
        /**
         * Set the role to tab list.
         * @default 'tablist'
         */
        this.role = input('tablist');
        this.hostClasses = computed(() => ({
            nav: true,
            [`nav-${this.layout()}`]: this.layout(),
            [`nav-${this.variant()}`]: this.variant()
        }));
        this.tabs = contentChildren(TabDirective);
        this.tabsEffect = effect(() => {
            if (this.tabs().length === 0) {
                return;
            }
            this.#focusKeyManager = new FocusKeyManager(this.tabs())
                .skipPredicate((tab) => tab.disabled === true)
                .withHorizontalOrientation('ltr')
                .withHomeAndEnd()
                .withWrap();
            this.#focusKeyManager.change
                .pipe(tap((value) => {
                this.tabsService.activeItemKey.set(this.#focusKeyManager.activeItem?.itemKey());
                this.tabsService.activeItem.set(this.#focusKeyManager.activeItem);
            }), takeUntilDestroyed(this.#destroyRef))
                .subscribe();
            const activeItem = this.tabs().find((tab) => untracked(tab.isActive)) ?? this.tabs().find((tab) => !tab.disabled);
            const activeItemIndex = this.tabs().findIndex((tab) => tab === activeItem);
            this.#focusKeyManager?.updateActiveItem(activeItemIndex < 0 ? 0 : activeItemIndex);
            this.tabsService.activeItemKey.set(this.#focusKeyManager.activeItem?.itemKey());
            this.tabsService.activeItem.set(this.#focusKeyManager.activeItem);
        }, { allowSignalWrites: true });
        this.tabsServiceEffect = effect(() => {
            const activeItemIndex = this.tabs().findIndex((tab) => untracked(tab.isActive) && untracked(tab.itemKey) === this.tabsService.activeItemKey());
            this.#focusKeyManager?.updateActiveItem(activeItemIndex < 0 ? 0 : activeItemIndex);
        });
    }
    #destroyRef;
    #focusKeyManager;
    onKeydown($event) {
        if (['ArrowLeft', 'ArrowRight'].includes($event.key)) {
            this.#focusKeyManager.onKeydown($event);
            return;
        }
        if (['Tab'].includes($event.key)) {
            this.#focusKeyManager?.tabOut.next();
        }
        return;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TabsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.2.0", version: "18.2.2", type: TabsListComponent, isStandalone: true, selector: "c-tabs-list", inputs: { layout: { classPropertyName: "layout", publicName: "layout", isSignal: true, isRequired: false, transformFunction: null }, variant: { classPropertyName: "variant", publicName: "variant", isSignal: true, isRequired: false, transformFunction: null }, role: { classPropertyName: "role", publicName: "role", isSignal: true, isRequired: false, transformFunction: null } }, host: { listeners: { "keydown": "onKeydown($event)" }, properties: { "attr.role": "role()", "class": "hostClasses()" } }, queries: [{ propertyName: "tabs", predicate: TabDirective, isSignal: true }], exportAs: ["cTabsList"], ngImport: i0, template: '<ng-content />', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TabsListComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'cTabsList',
                    selector: 'c-tabs-list',
                    standalone: true,
                    imports: [TabDirective],
                    template: '<ng-content />',
                    host: {
                        '[attr.role]': 'role()',
                        '[class]': 'hostClasses()'
                    }
                }]
        }], propDecorators: { onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,