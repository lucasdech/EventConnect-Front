import { booleanAttribute, computed, DestroyRef, Directive, effect, ElementRef, inject, Input, input, signal, untracked } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { fromEvent, merge, takeWhile } from 'rxjs';
import { filter, tap } from 'rxjs/operators';
import { TabsService } from '../tabs.service';
import * as i0 from "@angular/core";
export class TabDirective {
    constructor() {
        this.#destroyRef = inject(DestroyRef);
        this.#elementRef = inject(ElementRef);
        this.#tabsService = inject(TabsService);
        this.#disabled = signal(false);
        this.attrDisabled = computed(() => this.#disabled() || null);
        /**
         * Item key.
         * @type string | number
         * @required
         */
        this.itemKey = input.required();
        /**
         * Element id attribute
         * @type string
         * @default undefined
         */
        this.id = input();
        /**
         * aria-controls attribute
         * @type string
         * @default undefined
         */
        this.ariaControls = input(undefined, {
            alias: 'aria-controls'
        });
        this.isActive = computed(() => !this.#disabled() && this.#tabsService.activeItemKey() === this.itemKey());
        this.hostClasses = computed(() => ({
            'nav-link': true,
            active: this.isActive(),
            disabled: this.#disabled()
        }));
        this.propId = computed(() => this.id() ?? `${this.#tabsService.id()}-tab-${this.itemKey()}`);
        this.attrAriaControls = computed(() => this.ariaControls() ?? `${this.#tabsService.id()}-panel-${this.itemKey()}`);
        this.disabledEffect = effect(() => {
            if (!this.#disabled()) {
                const click$ = fromEvent(this.#elementRef.nativeElement, 'click');
                const focusIn$ = fromEvent(this.#elementRef.nativeElement, 'focusin');
                merge(focusIn$, click$)
                    .pipe(filter(($event) => !this.#disabled()), tap(($event) => {
                    this.#tabsService.activeItemKey.set(untracked(this.itemKey));
                }), takeWhile(() => !this.#disabled()), takeUntilDestroyed(this.#destroyRef))
                    .subscribe();
            }
        }, { allowSignalWrites: true });
    }
    #destroyRef;
    #elementRef;
    #tabsService;
    /**
     * Disabled attribute
     * @type boolean
     * @default false
     */
    set disabled(value) {
        this.#disabled.set(value);
    }
    get disabled() {
        return this.#disabled();
    }
    #disabled;
    focus(origin) {
        this.#elementRef.nativeElement.focus();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TabDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.2", type: TabDirective, isStandalone: true, selector: "button[cTab]", inputs: { disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: false, isRequired: false, transformFunction: booleanAttribute }, itemKey: { classPropertyName: "itemKey", publicName: "itemKey", isSignal: true, isRequired: true, transformFunction: null }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, ariaControls: { classPropertyName: "ariaControls", publicName: "aria-controls", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "type": "button", "role": "tab" }, properties: { "class": "hostClasses()", "attr.aria-selected": "isActive()", "attr.aria-controls": "attrAriaControls()", "attr.disabled": "attrDisabled() || null", "id": "propId()", "tabindex": "isActive() ? 0 : -1" } }, exportAs: ["cTab"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TabDirective, decorators: [{
            type: Directive,
            args: [{
                    exportAs: 'cTab',
                    selector: 'button[cTab]',
                    standalone: true,
                    host: {
                        '[class]': 'hostClasses()',
                        type: 'button',
                        role: 'tab',
                        '[attr.aria-selected]': 'isActive()',
                        '[attr.aria-controls]': 'attrAriaControls()',
                        '[attr.disabled]': 'attrDisabled() || null',
                        '[id]': 'propId()',
                        '[tabindex]': 'isActive() ? 0 : -1'
                    }
                }]
        }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,