import { booleanAttribute, Component, computed, input } from '@angular/core';
import * as i0 from "@angular/core";
export class ButtonGroupComponent {
    constructor() {
        /**
         * Size the component small or large.
         * @type { 'sm' | 'lg' }
         */
        this.size = input();
        /**
         * Create a set of buttons that appear vertically stacked rather than horizontally. Split button dropdowns are not supported here.
         * @type boolean
         */
        this.vertical = input(false, { transform: booleanAttribute });
        /**
         * Default role attr for ButtonGroup. [docs]
         * @type InputSignal<string>
         * @default 'group'
         */
        this.role = input('group');
        this.hostClasses = computed(() => {
            return {
                'btn-group': !this.vertical(),
                'btn-group-vertical': this.vertical(),
                [`btn-group-${this.size()}`]: !!this.size()
            };
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ButtonGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.2", type: ButtonGroupComponent, isStandalone: true, selector: "c-button-group", inputs: { size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null }, vertical: { classPropertyName: "vertical", publicName: "vertical", isSignal: true, isRequired: false, transformFunction: null }, role: { classPropertyName: "role", publicName: "role", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.role": "role()", "class": "hostClasses()" } }, ngImport: i0, template: '<ng-content />', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ButtonGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c-button-group',
                    template: '<ng-content />',
                    standalone: true,
                    host: { '[attr.role]': 'role()', '[class]': 'hostClasses()' }
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYnV0dG9uLWdyb3VwL2J1dHRvbi1ncm91cC9idXR0b24tZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBeUMsTUFBTSxlQUFlLENBQUM7O0FBUXBILE1BQU0sT0FBTyxvQkFBb0I7SUFOakM7UUFPRTs7O1dBR0c7UUFDTSxTQUFJLEdBQXlDLEtBQUssRUFBRSxDQUFDO1FBRTlEOzs7V0FHRztRQUNNLGFBQVEsR0FBK0MsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFFOUc7Ozs7V0FJRztRQUNNLFNBQUksR0FBd0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTNDLGdCQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNuQyxPQUFPO2dCQUNMLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQzdCLG9CQUFvQixFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ3JDLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2FBQzVDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztLQUNKOzhHQTNCWSxvQkFBb0I7a0dBQXBCLG9CQUFvQiw0Z0JBSnJCLGdCQUFnQjs7MkZBSWYsb0JBQW9CO2tCQU5oQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUUsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUU7aUJBQzlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbkF0dHJpYnV0ZSwgQ29tcG9uZW50LCBjb21wdXRlZCwgaW5wdXQsIElucHV0U2lnbmFsLCBJbnB1dFNpZ25hbFdpdGhUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYy1idXR0b24tZ3JvdXAnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50IC8+JyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaG9zdDogeyAnW2F0dHIucm9sZV0nOiAncm9sZSgpJywgJ1tjbGFzc10nOiAnaG9zdENsYXNzZXMoKScgfVxufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25Hcm91cENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBTaXplIHRoZSBjb21wb25lbnQgc21hbGwgb3IgbGFyZ2UuXG4gICAqIEB0eXBlIHsgJ3NtJyB8ICdsZycgfVxuICAgKi9cbiAgcmVhZG9ubHkgc2l6ZTogSW5wdXRTaWduYWw8J3NtJyB8ICdsZycgfCB1bmRlZmluZWQ+ID0gaW5wdXQoKTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgc2V0IG9mIGJ1dHRvbnMgdGhhdCBhcHBlYXIgdmVydGljYWxseSBzdGFja2VkIHJhdGhlciB0aGFuIGhvcml6b250YWxseS4gU3BsaXQgYnV0dG9uIGRyb3Bkb3ducyBhcmUgbm90IHN1cHBvcnRlZCBoZXJlLlxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqL1xuICByZWFkb25seSB2ZXJ0aWNhbDogSW5wdXRTaWduYWxXaXRoVHJhbnNmb3JtPGJvb2xlYW4sIHVua25vd24+ID0gaW5wdXQoZmFsc2UsIHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHJvbGUgYXR0ciBmb3IgQnV0dG9uR3JvdXAuIFtkb2NzXVxuICAgKiBAdHlwZSBJbnB1dFNpZ25hbDxzdHJpbmc+XG4gICAqIEBkZWZhdWx0ICdncm91cCdcbiAgICovXG4gIHJlYWRvbmx5IHJvbGU6IElucHV0U2lnbmFsPHN0cmluZz4gPSBpbnB1dCgnZ3JvdXAnKTtcblxuICByZWFkb25seSBob3N0Q2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgJ2J0bi1ncm91cCc6ICF0aGlzLnZlcnRpY2FsKCksXG4gICAgICAnYnRuLWdyb3VwLXZlcnRpY2FsJzogdGhpcy52ZXJ0aWNhbCgpLFxuICAgICAgW2BidG4tZ3JvdXAtJHt0aGlzLnNpemUoKX1gXTogISF0aGlzLnNpemUoKVxuICAgIH07XG4gIH0pO1xufVxuIl19