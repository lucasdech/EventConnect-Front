import { computed, DestroyRef, Directive, effect, HostBinding, inject, Inject, input, model, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { createPopper } from '@popperjs/core';
import { TooltipComponent } from './tooltip/tooltip.component';
import { IntersectionService, ListenersService } from '../services';
import { debounceTime, filter, finalize } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "../services";
export class TooltipDirective {
    get ariaDescribedBy() {
        return this.tooltipId ? this.tooltipId : null;
    }
    #destroyRef;
    constructor(document, renderer, hostElement, viewContainerRef, listenersService, changeDetectorRef, intersectionService) {
        this.document = document;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.viewContainerRef = viewContainerRef;
        this.listenersService = listenersService;
        this.changeDetectorRef = changeDetectorRef;
        this.intersectionService = intersectionService;
        /**
         * Content of tooltip
         * @type {string | TemplateRef}
         */
        this.content = input(undefined, { alias: 'cTooltip' });
        this.contentEffect = effect(() => {
            if (this.content()) {
                this.destroyTooltipElement();
            }
        });
        /**
         * Optional popper Options object, takes precedence over cPopoverPlacement prop
         * @type Partial<Options>
         */
        this.popperOptions = input({}, { alias: 'cTooltipOptions' });
        this.popperOptionsEffect = effect(() => {
            this._popperOptions = {
                ...this._popperOptions,
                placement: this.placement(),
                ...this.popperOptions(),
            };
        });
        this.popperOptionsComputed = computed(() => {
            return { placement: this.placement(), ...this._popperOptions };
        });
        /**
         * Describes the placement of your component after Popper.js has applied all the modifiers that may have flipped or altered the originally provided placement property.
         * @type: 'top' | 'bottom' | 'left' | 'right'
         * @default: 'top'
         */
        this.placement = input('top', {
            alias: 'cTooltipPlacement',
        });
        /**
         * ElementRefDirective for positioning the tooltip on reference element
         * @type: ElementRefDirective
         * @default: undefined
         */
        this.reference = input(undefined, {
            alias: 'cTooltipRef',
        });
        this.referenceRef = computed(() => this.reference()?.elementRef ?? this.hostElement);
        /**
         * Sets which event handlers you’d like provided to your toggle prop. You can specify one trigger or an array of them.
         * @type: 'Triggers | Triggers[]
         */
        this.trigger = input('hover', { alias: 'cTooltipTrigger' });
        /**
         * Toggle the visibility of tooltip component.
         * @type boolean
         */
        this.visible = model(false, { alias: 'cTooltipVisible' });
        this.visibleEffect = effect(() => {
            this.visible() ? this.addTooltipElement() : this.removeTooltipElement();
        });
        this._popperOptions = {
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, 5],
                    },
                },
            ],
        };
        this.#destroyRef = inject(DestroyRef);
    }
    ngAfterViewInit() {
        this.intersectionServiceSubscribe();
    }
    ngOnDestroy() {
        this.clearListeners();
        this.destroyTooltipElement();
    }
    ngOnInit() {
        this.setListeners();
    }
    setListeners() {
        const config = {
            hostElement: this.hostElement,
            trigger: this.trigger(),
            callbackToggle: () => {
                this.visible.set(!this.visible());
            },
            callbackOff: () => {
                this.visible.set(false);
            },
            callbackOn: () => {
                this.visible.set(true);
            },
        };
        this.listenersService.setListeners(config);
    }
    clearListeners() {
        this.listenersService.clearListeners();
    }
    intersectionServiceSubscribe() {
        this.intersectionService.createIntersectionObserver(this.referenceRef());
        this.intersectionService.intersecting$
            .pipe(filter((next) => next.hostElement === this.referenceRef()), debounceTime(100), finalize(() => {
            this.intersectionService.unobserve(this.referenceRef());
        }), takeUntilDestroyed(this.#destroyRef))
            .subscribe((next) => {
            this.visible.set(next.isIntersecting ? this.visible() : false);
        });
    }
    getUID(prefix) {
        let uid = prefix ?? 'random-id';
        do {
            uid = `${prefix}-${Math.floor(Math.random() * 1000000).toString(10)}`;
        } while (this.document.getElementById(uid));
        return uid;
    }
    createTooltipElement() {
        if (!this.tooltipRef) {
            this.tooltipRef = this.viewContainerRef.createComponent(TooltipComponent);
            // this.viewContainerRef.detach();
        }
    }
    destroyTooltipElement() {
        this.tooltip?.remove();
        this.tooltipRef?.destroy();
        // @ts-ignore
        this.tooltipRef = undefined;
        this.popperInstance?.destroy();
        this.viewContainerRef?.detach();
        this.viewContainerRef?.clear();
    }
    addTooltipElement() {
        if (!this.content()) {
            this.destroyTooltipElement();
            return;
        }
        if (!this.tooltipRef) {
            this.createTooltipElement();
        }
        this.tooltipId = this.getUID('tooltip');
        this.tooltipRef.instance.id = this.tooltipId;
        this.tooltipRef.instance.content = this.content() ?? '';
        this.tooltip = this.tooltipRef.location.nativeElement;
        this.renderer.addClass(this.tooltip, 'd-none');
        this.renderer.addClass(this.tooltip, 'fade');
        this.popperInstance?.destroy();
        this.viewContainerRef.insert(this.tooltipRef.hostView);
        this.renderer.appendChild(this.document.body, this.tooltip);
        this.popperInstance = createPopper(this.referenceRef().nativeElement, this.tooltip, {
            ...this.popperOptionsComputed(),
        });
        if (!this.visible()) {
            this.removeTooltipElement();
            return;
        }
        this.renderer.removeClass(this.tooltip, 'd-none');
        this.changeDetectorRef.markForCheck();
        setTimeout(() => {
            this.tooltipRef && (this.tooltipRef.instance.visible = this.visible());
            this.popperInstance?.forceUpdate();
            this.changeDetectorRef?.markForCheck();
        }, 100);
    }
    removeTooltipElement() {
        this.tooltipId = '';
        if (!this.tooltipRef) {
            return;
        }
        this.tooltipRef.instance.visible = false;
        this.tooltipRef.instance.id = undefined;
        this.changeDetectorRef.markForCheck();
        setTimeout(() => {
            this.viewContainerRef?.detach();
        }, 300);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TooltipDirective, deps: [{ token: DOCUMENT }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: i1.ListenersService }, { token: i0.ChangeDetectorRef }, { token: i1.IntersectionService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.2", type: TooltipDirective, isStandalone: true, selector: "[cTooltip]", inputs: { content: { classPropertyName: "content", publicName: "cTooltip", isSignal: true, isRequired: false, transformFunction: null }, popperOptions: { classPropertyName: "popperOptions", publicName: "cTooltipOptions", isSignal: true, isRequired: false, transformFunction: null }, placement: { classPropertyName: "placement", publicName: "cTooltipPlacement", isSignal: true, isRequired: false, transformFunction: null }, reference: { classPropertyName: "reference", publicName: "cTooltipRef", isSignal: true, isRequired: false, transformFunction: null }, trigger: { classPropertyName: "trigger", publicName: "cTooltipTrigger", isSignal: true, isRequired: false, transformFunction: null }, visible: { classPropertyName: "visible", publicName: "cTooltipVisible", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { visible: "cTooltipVisibleChange" }, host: { properties: { "attr.aria-describedby": "this.ariaDescribedBy" } }, providers: [ListenersService, IntersectionService], exportAs: ["cTooltip"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: TooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[cTooltip]',
                    exportAs: 'cTooltip',
                    providers: [ListenersService, IntersectionService],
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: i1.ListenersService }, { type: i0.ChangeDetectorRef }, { type: i1.IntersectionService }], propDecorators: { ariaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }] } });
//# sourceMappingURL=data:application/json;base64,