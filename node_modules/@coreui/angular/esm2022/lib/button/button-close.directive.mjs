import { booleanAttribute, computed, Directive, input } from '@angular/core';
import { ThemeDirective } from '../shared/theme.directive';
import { ButtonDirective } from './button.directive';
import * as i0 from "@angular/core";
import * as i1 from "../shared/theme.directive";
export class ButtonCloseDirective extends ButtonDirective {
    constructor() {
        super(...arguments);
        /**
         * Change the default color to white.
         * @type boolean
         * @deprecated 5.0.0. Use `cButtonClose.dark` instead.
         */
        this.white = input(false, { transform: booleanAttribute });
        this.hostClasses = computed(() => {
            return {
                btn: true,
                'btn-close': true,
                'btn-close-white': this.white(),
                [`btn-${this.size()}`]: !!this.size(),
                active: this.active(),
                disabled: this._disabled()
            };
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ButtonCloseDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.2", type: ButtonCloseDirective, isStandalone: true, selector: "[cButtonClose]", inputs: { white: { classPropertyName: "white", publicName: "white", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class": "hostClasses()", "attr.aria-disabled": "ariaDisabled()", "attr.aria-pressed": "isActive()", "attr.disabled": "attrDisabled()", "attr.tabindex": "tabIndex()", "attr.type": "type()" }, classAttribute: "btn btn-close" }, usesInheritance: true, hostDirectives: [{ directive: i1.ThemeDirective, inputs: ["dark", "dark"] }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.2", ngImport: i0, type: ButtonCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[cButtonClose]',
                    standalone: true,
                    hostDirectives: [{ directive: ThemeDirective, inputs: ['dark'] }],
                    host: {
                        class: 'btn btn-close',
                        '[class]': 'hostClasses()',
                        '[attr.aria-disabled]': 'ariaDisabled()',
                        '[attr.aria-pressed]': 'isActive()',
                        '[attr.disabled]': 'attrDisabled()',
                        '[attr.tabindex]': 'tabIndex()',
                        '[attr.type]': 'type()'
                    }
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWNsb3NlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmV1aS1hbmd1bGFyL3NyYy9saWIvYnV0dG9uL2J1dHRvbi1jbG9zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFnQnJELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxlQUFlO0lBZHpEOztRQWVFOzs7O1dBSUc7UUFDTSxVQUFLLEdBQStDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBRXpGLGdCQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUM1QyxPQUFPO2dCQUNMLEdBQUcsRUFBRSxJQUFJO2dCQUNULFdBQVcsRUFBRSxJQUFJO2dCQUNqQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUMvQixDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDckMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO2FBQ0EsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztLQUNKOzhHQWxCWSxvQkFBb0I7a0dBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFkaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsY0FBYyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7b0JBQ2pFLElBQUksRUFBRTt3QkFDSixLQUFLLEVBQUUsZUFBZTt3QkFDdEIsU0FBUyxFQUFFLGVBQWU7d0JBQzFCLHNCQUFzQixFQUFFLGdCQUFnQjt3QkFDeEMscUJBQXFCLEVBQUUsWUFBWTt3QkFDbkMsaUJBQWlCLEVBQUUsZ0JBQWdCO3dCQUNuQyxpQkFBaUIsRUFBRSxZQUFZO3dCQUMvQixhQUFhLEVBQUUsUUFBUTtxQkFDeEI7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBib29sZWFuQXR0cmlidXRlLCBjb21wdXRlZCwgRGlyZWN0aXZlLCBpbnB1dCwgSW5wdXRTaWduYWxXaXRoVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaGVtZURpcmVjdGl2ZSB9IGZyb20gJy4uL3NoYXJlZC90aGVtZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi9idXR0b24uZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NCdXR0b25DbG9zZV0nLFxuICBzdGFuZGFsb25lOiB0cnVlLFxuICBob3N0RGlyZWN0aXZlczogW3sgZGlyZWN0aXZlOiBUaGVtZURpcmVjdGl2ZSwgaW5wdXRzOiBbJ2RhcmsnXSB9XSxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAnYnRuIGJ0bi1jbG9zZScsXG4gICAgJ1tjbGFzc10nOiAnaG9zdENsYXNzZXMoKScsXG4gICAgJ1thdHRyLmFyaWEtZGlzYWJsZWRdJzogJ2FyaWFEaXNhYmxlZCgpJyxcbiAgICAnW2F0dHIuYXJpYS1wcmVzc2VkXSc6ICdpc0FjdGl2ZSgpJyxcbiAgICAnW2F0dHIuZGlzYWJsZWRdJzogJ2F0dHJEaXNhYmxlZCgpJyxcbiAgICAnW2F0dHIudGFiaW5kZXhdJzogJ3RhYkluZGV4KCknLFxuICAgICdbYXR0ci50eXBlXSc6ICd0eXBlKCknXG4gIH1cbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uQ2xvc2VEaXJlY3RpdmUgZXh0ZW5kcyBCdXR0b25EaXJlY3RpdmUge1xuICAvKipcbiAgICogQ2hhbmdlIHRoZSBkZWZhdWx0IGNvbG9yIHRvIHdoaXRlLlxuICAgKiBAdHlwZSBib29sZWFuXG4gICAqIEBkZXByZWNhdGVkIDUuMC4wLiBVc2UgYGNCdXR0b25DbG9zZS5kYXJrYCBpbnN0ZWFkLlxuICAgKi9cbiAgcmVhZG9ubHkgd2hpdGU6IElucHV0U2lnbmFsV2l0aFRyYW5zZm9ybTxib29sZWFuLCB1bmtub3duPiA9IGlucHV0KGZhbHNlLCB7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KTtcblxuICBvdmVycmlkZSByZWFkb25seSBob3N0Q2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYnRuOiB0cnVlLFxuICAgICAgJ2J0bi1jbG9zZSc6IHRydWUsXG4gICAgICAnYnRuLWNsb3NlLXdoaXRlJzogdGhpcy53aGl0ZSgpLFxuICAgICAgW2BidG4tJHt0aGlzLnNpemUoKX1gXTogISF0aGlzLnNpemUoKSxcbiAgICAgIGFjdGl2ZTogdGhpcy5hY3RpdmUoKSxcbiAgICAgIGRpc2FibGVkOiB0aGlzLl9kaXNhYmxlZCgpXG4gICAgfSBhcyBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPjtcbiAgfSk7XG59XG4iXX0=